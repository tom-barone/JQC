# See here for list of installed packages under 'ubuntu-22.04'
# https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md

name: 'continuous integration'
on:
  push:
    branches: ['develop']
jobs:
  run_tests:
    runs-on: 'ubuntu-22.04'
    environment: 'test'
    env:
      RAILS_ENV: 'test'
      RAILS_MASTER_KEY: ${{ secrets.RAILS_CREDENTIALS_TEST_KEY }}
    steps:
      - name: 'Checkout code'
        uses: 'actions/checkout@v3'
        with:
          fetch-depth: 0  # Deep clone for use with SonarCloud

      - name: 'Start Google Cloud SQL proxy'
        uses: 'tom-barone/gce-cloudsql-proxy-action@master'
        with:
          creds: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS }}
          instance: ${{ secrets.GOOGLE_CLOUD_SQL_INSTANCE }}
          port: 3306
          
      - name: 'Install Ruby and gems'
        uses: 'ruby/setup-ruby@v1'
        with:
          bundler-cache: true

      - name: 'Run tests'
        run: 'make test'

      - name: 'Save failed test screenshots'
        if: ${{ failure() }}
        uses: 'actions/upload-artifact@v4'
        with:
          name: 'failed-test-screenshots'
          path: 'tmp/screenshots'

      - name: 'Save test and code coverage results'
        uses: 'actions/upload-artifact@v4'
        with:
          name: 'test-reports'
          path: 'ci'

      # https://community.sonarsource.com/t/code-coverage-doesnt-work-with-github-action/16747/7
      - name: 'Fix code coverage paths'
        run: |
          find ci -name '*.info' -o -name '*.json' -o -name '*.xml' | xargs sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace/@g'

      - name: 'Scan with SonarCloud'
        uses: 'SonarSource/sonarcloud-github-action@master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: 'Check SonarCloud results and fail pipeline if failed'
        run: |
          sleep 30s # Wait for results to be uploaded
          GATE_STATUS=$(curl https://sonarcloud.io/api/qualitygates/project_status?projectKey=tom-barone_JQC --silent | jq .projectStatus.status)
          echo "Gate status: $GATE_STATUS"
          [[ $GATE_STATUS != "ERROR" ]] # Will fail if equal to ERROR
        
  deploy_staging:
    needs: ['run_tests']
    runs-on: 'ubuntu-22.04'
    environment: 'deploy'
    env:
      RAILS_ENV: 'staging'
      # Allow us to migrate the staging & production databases
      RAILS_DATABASE_SOCKET: 'null'
      RAILS_DATABASE_HOST: '127.0.0.1'
      RAILS_DATABASE_PORT: 3306
      GOOGLE_APP_ENGINE_PROJECT: ${{ secrets.GOOGLE_APP_ENGINE_PROJECT }}
    steps:
      - name: 'Checkout code'
        uses: 'actions/checkout@v3'

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: 'Start Google Cloud SQL proxy'
        uses: 'tom-barone/gce-cloudsql-proxy-action@master'
        with:
          creds: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS }}
          instance: ${{ secrets.GOOGLE_CLOUD_SQL_INSTANCE }}
          port: 3306

      - name: 'Install Ruby and gems'
        uses: 'ruby/setup-ruby@v1'
        with:
          bundler-cache: true

      - name: 'Add staging key to config dir'
        run: 'echo "${{ secrets.RAILS_CREDENTIALS_STAGING_KEY }}" > config/credentials/staging.key'

      - name: 'Deploy the staging site'
        run: 'make deploy-staging'

  test_staging:
    needs: ['deploy_staging']
    runs-on: 'ubuntu-22.04'
    environment: 'deploy'
    env:
      RAILS_ENV: 'staging'
      RAILS_MASTER_KEY: ${{ secrets.RAILS_CREDENTIALS_STAGING_KEY }}
    steps:
      - name: 'Checkout code'
        uses: 'actions/checkout@v3'

      - name: 'Install Ruby and gems'
        uses: 'ruby/setup-ruby@v1'
        with:
          bundler-cache: true

      - name: 'Run tests against the staging site'
        run: 'TEST_HOST=${{ secrets.STAGING_URL }} make test-live-site'
